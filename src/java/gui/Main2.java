/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import nl2kaos.*;

/**
 *
 * @author personal
 */
public class Main2 extends javax.swing.JFrame {

    NL2KAOSf nl;

    /**
     * Creates new form Main2
     */
    public Main2() {
        initComponents();
        try {
            nl = new NL2KAOSf();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No está bien configurado el Freeling.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        tTexto.setText("El sitema registra usuarios.");
        tTexto.setColumns(20);
        tTexto.setRows(5);
        tTexto.setText("Debo poner este dinero en el banco. Yo quiero tomar asiento en el banco del parque.");
        tTexto.setName("texto"); // NOI18N
        tTexto.setLineWrap(true);
        tTexto.setWrapStyleWord(true);
        jScrollPane1.setViewportView(tTexto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tTexto = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        butProcesar = new javax.swing.JButton();
        butBorrar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tTexto.setColumns(20);
        tTexto.setRows(5);
        jScrollPane1.setViewportView(tTexto);

        jLabel1.setText("Ingrese los requisitos del interesado:");

        butProcesar.setText("Procesar");
        butProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProcesarActionPerformed(evt);
            }
        });

        butBorrar.setText("Borrar");
        butBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBorrarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem4.setText("Configurar");
        jMenu1.add(jMenuItem4);

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenu3.setText("Cargar ejemplo");

        jMenuItem5.setText("Ambulancia");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem7.setText("Ascensor");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem6.setText("Pizzería");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem8.setText("Robots");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenu2.add(jMenu3);

        jMenuItem2.setText("Contenidos de ayuda");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Acerca de...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(254, Short.MAX_VALUE)
                .addComponent(butProcesar)
                .addGap(26, 26, 26)
                .addComponent(butBorrar)
                .addGap(278, 278, 278))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butProcesar)
                    .addComponent(butBorrar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void butBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBorrarActionPerformed
        tTexto.setText("");
    }//GEN-LAST:event_butBorrarActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        //Carga el ejemplo de la Ambulancia
        tTexto.setText("Los auxiliares de la ambulancia reciben instrucciones de localización del operador de radio. Los auxiliares de la ambulancia envía información al operador de radio. El asistente de control recibe las llamadas de emergencia. El asistente de control rellena el formulario del incidente. El asistente de control indica en el formulario la localización del incidente y la hora en la que la llamada fue hecha. El tiempo necesario para atender la llamada y tramitar el formulario del incidente no deben tomar más de cierto tiempo. El operario de localización de recursos examina el formulario del incidente. El operario de localización de recursos identifica cuál es la ambulancia más cercana. El operario de localización de recursos selecciona la ambulancia más cercana al incidente. El operario de localización de recursos acepta propuesta del sistema CAD. El operario de localización de recursos rechaza propuesta del sistema CAD.\n"
                + "El sistema CAD propone al operario de localización de recursos la ambulancia más apropiada. El sistema CAD puede proponer otra ambulancia, en caso de que el operario de localización de recursos rechace la propuesta inicial. El operador logístico llama al personal de ambulancia, si se encuentra en la estación. El operador logístico le da los datos al personal de ambulancia para llegar al lugar del incidente. El operador logístico da información al operador de radio para que guíe a la ambulancia. El operador de radio recibe información de la ambulancia seleccionada. El operador de radio da instrucciones de localización al personal de ambulancia. El operador de radio recibe información del personal de ambulancia.");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        //Carga el ejemplo de la Pizzería
        tTexto.setText("El administrador de la pizzería desea aumentar la rentabilidad del negocio.\n"
                + "La pizzería tiene un administrador, un operador logístico, un cocinero y dos repartidores.\n"
                + "El administrador de la pizzería ofrece a los clientes diversos tipos y tamaños de pizza.\n"
                + "También, el administrador de la pizzería ofrece a los clientes la posibilidad de ordenar aditivos para la pizza.\n"
                + "Los clientes pueden ordenar aditivos para la pizza.\n"
                + "El administrador de la pizzería ha definido una zona de cobertura determinada.\n"
                + "El administrador de la pizzería propone una promoción: la pizzería debe entregar el pedido al cliente en menos de 30 minutos; de lo contrario, será gratis. Así, los repartidores deben evitar entregar pedidos retardados.\n"
                + "El administrador de la pizzería envía a los repartidores a entregar la pizza.\n"
                + "Los repartidores entregan la pizza en menos de 30 minutos, de lo contrario, el administrador de la pizzería cobra a los repartidores el pedido.\n"
                + "Así, el administrador de la pizzería evita la pérdida de dinero.");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        //Carga el ejemplo del Ascensor
        tTexto.setText("La compañía encargada del elevador debe garantizar una forma de escape.\n"
                + "El ingeniero de control de la compañía construye una interfaz basada en botones.\n"
                + "La compañía garantiza la existencia de un botón de emergencia.\n"
                + "La compañía realiza el montaje de una planta para la energía de emergencia.\n"
                + "El ingeniero civil diseña la estructura del ascensor.\n"
                + "El técnico de sistemas asegura el funcionamiento del software.\n"
                + "El controlador del elevador garantiza que las puertas no se abran mientras esté en movimiento.\n"
                + "El sistema de control detiene el elevador siempre que haya una falla de energía.\n"
                + "El sistema de control enciende la luz de emergencia cuando sea necesario.\n"
                + "El sistema de control puede abrir las puertas, cuando esté en el nivel indicado.\n"
                + "El sistema de control informa a los pasajeros del estado de su petición.\n"
                + "El sistema de control reporta a los pasajeros las condiciones de sobrepeso.");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        //Carga el ejemplo de los Robots constructores de diques
        tTexto.setText("Hoy en día, los robots se encuentran presentes en diferentes áreas de desarrollo, tales como la industria, el hogar, la medicina y el entretenimiento, entre otras. La prevención y atención de desastres es una aplicación que atrae considerablemente la atención de investigadores en el área de la robótica. En esta ocasión, el Encuentro Internacional de Robótica propone a los equipos competidores la creación de dos robots para la construcción de diques en zonas de desbordamiento o propensas al mismo.\n"
                + "En épocas de lluvias fuertes, los ríos tienden a subir su cauce y ponen en peligro la seguridad de poblaciones aledañas.\n"
                + "La competencia plantea a los competidores la construcción de dos Robots. Los robots deben construir un dique a las orillas de un río que se encuentra en peligro inminente de desbordamiento. Los robots deben recolectar y transportar unos pilotes que serán la base de dicha construcción.\n"
                + "La competencia consiste en una simulación de un río y dos poblaciones que se encuentran a cada lado. Por causa de las continuas lluvias, se ha estado presentando un repentino crecimiento en el nivel del agua y es factible que se presente un desborde en uno de los lados del río o quizá en ambos costados.\n"
                + "Es necesario detener el desbordamiento del agua y proteger las poblaciones. Para esto, los competidores deben diseñar dos robots que se encuentran a cada lado del río. Los robots deben construir un dique de contención que se ocupará de detener el desbordamiento del agua y proteger de esta forma las poblaciones aledañas.\n"
                + "Los robots serán ubicados en cada lado del río. Los robots deben construir el dique en una de las orillas del río o en ambos costados según lo determine la emergencia. Cada robot se encargará de un lado, pero si lo desea puede atravesar el río por medio de un puente que se encuentra en un extremo y colaborar con la construcción a su compañero.\n"
                + "Para la construcción del dique, los robots cuentan con unos pilotes que están ubicados en los extremos del escenario y se presentan de color rojo y verde, los rojos son para contener la zona de emergencia y los verdes para la zona de prevención.\n"
                + "El río se está desbordando y es indispensable construir un dique de contención en ambos costados o en uno de ellos, dependiendo del tipo de desbordamiento que se esté presentando. Para la construcción del dique, los robots cuentan con un grupo de pilotes que son ubicados en los extremos del escenario. Los pilotes son de color rojo y verde. El robot debe construir el dique prioritario con los pilotes rojos. El robot debe construir el dique de prevención con los verdes.\n"
                + "El robot debe construir el dique prioritario con la utilización de los pilotes rojos. El robot debe ubicar los pilotes cercando la zona de desborde.\n"
                + "El robot debe construir el dique de prevención utilizando los pilotes verdes. El robot debe colocarlos al lado del río en la zona en donde no se presenta el desborde.\n"
                + "La tarea principal de los robots es construir el dique prioritario y evitar un desastre. La construcción del dique de prevención es opcional y se debe realizar una vez se ha terminado la construcción del dique prioritario.\n"
                + "Ambos robots son ubicados al inicio de la prueba en un lugar específico a cada lado del río. Los pilotes están en los bordes del escenario. Los robots deben agarrar los pilotes. Los robots deben transportar los pilotes hasta las proximidades del río. Los robots deberán construir el dique en el menor tiempo posible.\n"
                + "Los competidores deben calibrar los sensores de acuerdo a los colores.\n"
                + "El río es una marca de color azul en la plataforma y ocupa la columna 6 desde la fila B hasta la J para este caso se encuentra representado mediante 9 tabletas azules sobre el escenario. Las dimensiones de cada tableta son 178±2 [mm], 178±2 [mm], 9±2 [mm] de alto. \n"
                + "Los robots no pueden tocar, ni desplazar los bloques de desbordamiento, puesto que se asume que el robot estaría cayendo en el flujo de agua y debe reiniciar la prueba.\n"
                + "El robot debe ser un dispositivo móvil autónomo construido con material educativo LEGO. El robot puede tener máximo de 6 sensores y 6 actuadores.\n"
                + "Los competidores no pueden modificar los elementos del kit educativo.\n"
                + "Las dimensiones del robot, antes de cada participación, no podrán ser mayores al tamaño de un cubo de 250 mm de lado. Una vez se inicia la participación, el robot puede desplegar cualquier clase de tenaza, brazo o extensión mecánica para tomar los pilotes.\n"
                + "El robot no debe comunicarse de manera alguna con dispositivos en el exterior. \n"
                + "Los competidores deben garantizar que el robot no debe deteriore el escenario.\n"
                + "Una vez iniciado el proceso de competencia, todos los competidores deberán dejar sus robots en el espacio asignado por la organización, a la vista de todos.\n"
                + "Posteriormente, se sortea el orden en que participarán los robots de los competidores. \n"
                + "Cuando los robots inician su intento no se podrán tocar. Cada equipo de competidores tendrá un máximo de dos reinicios por ronda.\n"
                + "El robot no puede salirse del escenario, de lo contrario el equipo de competidores deberá reiniciar el intento. El robot no puede cruzar el río o entrar en él.\n"
                + "Los robots pueden comunicarse unos con otros por cualquier medio (Bluetooth, infrarrojos, radio, sonido, luz, etc.). Los medios utilizados no deben tener intervención de terceros.\n"
                + "Los pilotes no deben estar encima de los bordes que se encuentran delineados por la cinta negra 3M.");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void butProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProcesarActionPerformed
        try {
            long time_start, time_end;
            time_start = System.currentTimeMillis();
//            nl.procesar(tTexto.getText());
            time_end = System.currentTimeMillis();
            System.out.println("the task has taken " + (time_end - time_start) + " milliseconds");

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_butProcesarActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Ayuda a = new Ayuda();
        a.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        AcercaDe a = new AcercaDe();
        a.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBorrar;
    private javax.swing.JButton butProcesar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tTexto;
    // End of variables declaration//GEN-END:variables
}
